#!/usr/bin/env python
# coding: utf-8

import os
import sys
import logging

import fitsio

from regressis.utils import setup_logging, mkdir


logger = logging.getLogger("Collect_dr9_feature")


def make_imaging_weight_map(randoms, targets, filename, nside, gaialoc):
    """
    Generate a map of HEALPixels with information on survey coverage, expected stellar density, and target density

    Reference: taken and adpated from https://github.com/echaussidon/desitarget/blob/master/bin/make_imaging_weight_map

    Parameters
    ----------
    randoms : array
        File of random points generated by, e.g., select_randoms
    targets : array
        File of targets generated by, e.g., select_targets (should be the same Data Release as used to make the randoms
    filename : str
        Output file name to write map of HEALPixel weights in the NESTED scheme
    nside : int
        The resolution (HEALPixel nside number) at which to build the map
    gaialoc : str
        A FITS file that already contains the Gaia stellar densities at nside to speed-up density calculations
    """

    from desitarget.randoms import pixmap

    if not os.path.exists(randoms):
        logger.critical('Input directory does not exist: {}'.format(randoms))
        sys.exit(1)

    if not os.path.exists(targets):
        logger.critical('Input directory does not exist: {}'.format(targets))
        sys.exit(1)

    hdr = fitsio.read_header(randoms, "RANDOMS")
    # add HEALPixel and gaialoc information to the header
    hdr['GAIALOC'] = gaialoc
    hdr['HPXNSIDE'] = nside
    hdr['HPXNEST'] = True

    pixmp, survey = pixmap(randoms, targets, hdr["DENSITY"], nside=nside, gaialoc=gaialoc)
    hdr["SURVEY"] = survey

    # write out the map
    fitsio.write(filename, pixmp, extname='PIXWEIGHTS', header=hdr, clobber=True)
    logger.info('wrote map of HEALPixel weights (in the nested scheme) to {}'.format(filename))


if __name__ == '__main__':

    # stardens file (ie) file loaded with gaialoc are generated previously. It is generated
    # with the following lines of code from a pixweight computed without --gaialoc
    # Without precomputed stardens file it takes an attional hour to generate one pixeweight file

    # import fitsio
    # nside = 512
    # stardens = fitsio.read(f'pixweight-dr9-{nside}.fits', columns=['HPXPIXEL', 'STARDENS'])
    # fits = fitsio.FITS(f'stardens-{nside}.fits', 'rw')
    # fits.write(stardens)
    # fits.close()

    setup_logging()
    logging.getLogger('desiutil.log.dlm58.info').setLevel(logging.ERROR)

    randoms = '/global/cfs/projectdirs/desi/target/catalogs/dr9/0.49.0/randoms/resolve/randoms-1-{}.fits'
    # we do not need any target density informations. Just to avoid error.
    targets = '/global/cfs/projectdirs/desi/target/catalogs/dr9/0.49.0/targets/main/resolve/dark/targets-dark-hp-11.fits'
    tmpdir = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'tmp')
    outdir = os.path.join(os.path.abspath(os.path.dirname(__file__)), '../data')

    nsides = [128, 256, 512]

    for nside in nsides:
        mkdir(tmpdir)

        gaialoc = os.path.join(os.path.abspath(os.path.dirname(__file__)), f'../data/stardens-{nside}.fits')
        nbr_randoms = 10  # 19 can be relevant for 512
        # there is a full random files called randomsall which is 17 times larger than the standard ones.
        # use this file to avoid the stupid loop to compute the fracarea.
        # take care it is time consuming and for small values of Nside, the loop can be quicker since 5 randoms can be enough.

        for i in range(nbr_randoms):
            make_imaging_weight_map(randoms.format(i), targets, os.path.join(tmpdir, f'pixweight-tmp-{i}.fits'), nside, gaialoc)

        pixmap = fitsio.read(os.path.join(tmpdir, 'pixweight-tmp-0.fits'))

        fracarea = pixmap['FRACAREA_12290'][:]
        for i in range(1, nbr_randoms):
            fracarea = fracarea + fitsio.read(os.path.join(tmpdir, f'pixweight-tmp-{i}.fits'), columns=['FRACAREA_12290'])['FRACAREA_12290'][:]
        fracarea /= nbr_randoms
        pixmap['FRACAREA_12290'] = fracarea

        fits = fitsio.FITS(os.path.join(outdir, f'pixweight-dr9-{nside}-new.fits'), 'rw')
        fits.write(pixmap)
        fits.close()

        import shutil
        shutil.rmtree(tmpdir)
